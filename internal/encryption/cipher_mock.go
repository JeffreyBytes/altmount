// Code generated by MockGen. DO NOT EDIT.
// Source: ./cipher.go
//
// Generated by this command:
//
//	mockgen -source=./cipher.go -destination=./cipher_mock.go -package=encryption Cipher
//

// Package encryption is a generated GoMock package.
package encryption

import (
	context "context"
	io "io"
	reflect "reflect"

	utils "github.com/javi11/altmount/internal/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockCipher is a mock of Cipher interface.
type MockCipher struct {
	ctrl     *gomock.Controller
	recorder *MockCipherMockRecorder
	isgomock struct{}
}

// MockCipherMockRecorder is the mock recorder for MockCipher.
type MockCipherMockRecorder struct {
	mock *MockCipher
}

// NewMockCipher creates a new mock instance.
func NewMockCipher(ctrl *gomock.Controller) *MockCipher {
	mock := &MockCipher{ctrl: ctrl}
	mock.recorder = &MockCipherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCipher) EXPECT() *MockCipherMockRecorder {
	return m.recorder
}

// DecryptedSize mocks base method.
func (m *MockCipher) DecryptedSize(encryptedFileSize int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptedSize", encryptedFileSize)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptedSize indicates an expected call of DecryptedSize.
func (mr *MockCipherMockRecorder) DecryptedSize(encryptedFileSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptedSize", reflect.TypeOf((*MockCipher)(nil).DecryptedSize), encryptedFileSize)
}

// EncryptedSize mocks base method.
func (m *MockCipher) EncryptedSize(fileSize int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptedSize", fileSize)
	ret0, _ := ret[0].(int64)
	return ret0
}

// EncryptedSize indicates an expected call of EncryptedSize.
func (mr *MockCipherMockRecorder) EncryptedSize(fileSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptedSize", reflect.TypeOf((*MockCipher)(nil).EncryptedSize), fileSize)
}

// Name mocks base method.
func (m *MockCipher) Name() CipherType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(CipherType)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCipherMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCipher)(nil).Name))
}

// Open mocks base method.
func (m *MockCipher) Open(ctx context.Context, rh *utils.RangeHeader, encryptedFileSize int64, password, salt string, getReader func(context.Context, int64, int64) (io.ReadCloser, error)) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx, rh, encryptedFileSize, password, salt, getReader)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockCipherMockRecorder) Open(ctx, rh, encryptedFileSize, password, salt, getReader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockCipher)(nil).Open), ctx, rh, encryptedFileSize, password, salt, getReader)
}

// OverheadSize mocks base method.
func (m *MockCipher) OverheadSize(fileSize int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OverheadSize", fileSize)
	ret0, _ := ret[0].(int64)
	return ret0
}

// OverheadSize indicates an expected call of OverheadSize.
func (mr *MockCipherMockRecorder) OverheadSize(fileSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverheadSize", reflect.TypeOf((*MockCipher)(nil).OverheadSize), fileSize)
}
